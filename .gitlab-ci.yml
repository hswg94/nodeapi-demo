image: node:25-slim

stages:
  - install
  - test
  - build
  - deploy

cache:
  paths:
    - node_modules/

install:
  stage: install
  script:
    - npm ci
  artifacts:
    paths:
      - node_modules/

test:
  stage: test
  script:
    - npm test

build_image:
  stage: build
  image: docker:25
  services:
    - docker:25-dind
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  before_script:
    - docker login -u $REGISTRY_USER -p $REGISTRY_PASS
  script:
  - docker build -t "$IMAGE_NAME:$CI_COMMIT_SHORT_SHA" .
  - docker push "$IMAGE_NAME:$CI_COMMIT_SHORT_SHA"

deploy:
  stage: deploy
  image: alpine:3.20
  variables:
    EC2_HOST: 54.255.182.118
    EC2_USER: ec2-user
  before_script:
    - apk add --no-cache openssh-client curl
    - chmod 600 "$SSH_KEY"
  script:
    - ssh -o StrictHostKeyChecking=no -i "$SSH_KEY" $EC2_USER@$EC2_HOST "echo \"$REGISTRY_PASS\" | sudo docker login -u \"$REGISTRY_USER\" --password-stdin"
    - ssh -o StrictHostKeyChecking=no -i "$SSH_KEY" $EC2_USER@$EC2_HOST "sudo docker rm -f nodeapi-demo || true"
    - ssh -o StrictHostKeyChecking=no -i "$SSH_KEY" $EC2_USER@$EC2_HOST "sudo docker pull \"$IMAGE_NAME:$CI_COMMIT_SHORT_SHA\""
    - ssh -o StrictHostKeyChecking=no -i "$SSH_KEY" $EC2_USER@$EC2_HOST "sudo docker run -d --name nodeapi-demo -p 80:3000 \"$IMAGE_NAME:$CI_COMMIT_SHORT_SHA\""
  after_script:
    - curl http://$EC2_HOST/health